name: Build and Package Release

on:
  push:
    tags:
      - "v*" # 当推送v开头的tag时触发（如v2.1.0）
  workflow_dispatch: # 允许手动触发

jobs:
  package:
    permissions:
      contents: write # 显式授予写入权限
    runs-on: ubuntu-latest # 使用GitHub提供的Linux环境
    timeout-minutes: 15 # 设置超时时间
    steps:
      # 1. 检出代码
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 获取完整提交历史

      # 2. 缓存优化（更细粒度的缓存）
      - name: Cache dependencies
        uses: actions/cache@v3
        id: cache
        with:
          path: |
            package/
            scripts/
          key: ${{ runner.os }}-package-${{ hashFiles('scripts/*', 'docs/*') }}

      # 3. 创建打包目录（避免包含.git文件夹）
      - name: Prepare files
        run: |
          rm -rf package/  # 强制清理旧目录
          mkdir -p package/{scripts,docs}
          echo "正在复制脚本文件..."
          cp -v scripts/* package/scripts/  # 显示详细复制过程
          [ -d "docs" ] && cp -vr docs/* package/docs/ || echo "无文档目录"
          cp -v README.md package/
          [ -f "LICENSE" ] && cp -v LICENSE package/ || echo "无 LICENSE 文件"

      # 4. 在打包前更新版本号
      # - name: Update versions
      #   run: |
      #     # 更新脚本文件
      #     find scripts/ -name "*.bat" -exec sed -i "s/:: Version: .*/:: Version: ${GITHUB_REF_NAME}/" {} \;
      #     # 更新README（仅影响打包内容）
      #     sed -i "s/版本: .*/版本: ${GITHUB_REF_NAME}/" README.md
      #     # 复制更新后的文件到package目录
      #     cp README.md package/

      # 5. 压缩打包（跨平台兼容格式）
      - name: Create ZIP archive
        run: |
          echo "当前目录结构:"
          ls -R
          echo "开始打包..."
          cd package
          zip -r ../GameOptimization_${GITHUB_REF_NAME}.zip *
          echo "打包完成，校验文件..."
          cd ..
          sha256sum GameOptimization_${GITHUB_REF_NAME}.zip > checksum.sha256
          echo "生成文件列表:"
          ls -l

      # 6. 创建 Release 并上传 ZIP 文件
      - name: Create Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload ZIP
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./GameOptimization_${{ github.ref_name }}.zip
          asset_name: GameOptimization_${{ github.ref_name }}.zip
          asset_content_type: application/zip

      # 7. 失败处理（更详细的日志输出）
      - name: Cleanup on failure
        if: failure()
        run: |
          echo "Build failed! Check the logs"
          echo "::group::Debug Info"
          ls -R
          echo "::endgroup::"
